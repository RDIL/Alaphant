plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

wrapper {
    version = "7.4"
}

group "com.charlesproxy"
version "1.0-SNAPSHOT"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()

    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }

    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

import alaphant.build.AnalyzeMappingsTask
import alaphant.build.RemapJarTask

def chlsOfficial = file("target/charles.jar")
def chlsMapped = file("build/charles_MAPPED.jar")
def chlsMappings = file("mappings/mappings.tiny")

if (!chlsOfficial.exists()) {
    throw new Error("No Charles official Jar found. Please copy it into the target directory from your Charles install!")
}

task remapJar(type: RemapJarTask) {
    inputJar = chlsOfficial
    mappings = chlsMappings
    outputJar = chlsMapped
    remapGoal = "official->intermediary"
}

task analyzeMappings(type: AnalyzeMappingsTask) {
    mappings = chlsMappings
}

compileJava {
    dependsOn remapJar
}

dependencies {
    implementation(fileTree(dir: "libs", include: "*.jar"))

    // Add Charles dependencies that can be fetched from Maven central to the runtime classpath
    implementation("com.google.errorprone:error_prone_annotations:2.3.4")
    implementation("org.mozilla:rhino:1.7.13")
    implementation("com.google.guava:failureaccess:1.0.1")
    implementation("org.xhtmlrenderer:flying-saucer-core:9.0.8")
    implementation("org.checkerframework:checker-compat-qual:2.5.5")
    implementation("javax.activation:activation:1.1.1")
    implementation("org.jclarion:image4j:0.7")
    implementation("com.twitter:hpack:1.0.2")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("org.jfree:jfreechart:1.5.3")
    implementation("org.brotli:dec:0.1.2")
    implementation("javax.servlet:javax.servlet-api:3.1.0")
    implementation("de.sciss:syntaxpane:1.2.0")
    implementation("com.google.protobuf:protobuf-java:3.16.1") // intentionally changed from 3.15.3 -> 3.16.1 to fix security issue
    implementation("com.google.protobuf:protobuf-java-util:3.16.1") { // intentionally changed from 3.15.3 -> 3.16.1 to fix security issue
        exclude group: "com.google.guava", module: "guava" // conflicts with the version of Guava that Mixin and Alaphant need
    }
    implementation("com.miglayout:miglayout-core:5.3")
    implementation("com.miglayout:miglayout-swing:5.3")
    implementation("jcifs:jcifs:1.3.17")
    implementation("com.google.j2objc:j2objc-annotations:1.3")
    implementation("com.thoughtworks.xstream:xstream:1.4.19") // intentionally changed from 1.4.15 -> 1.4.19 to fix security issues
    implementation("com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava")
    implementation("org.json:json:20201115")
    implementation("org.jasypt:jasypt:1.9.3")
    implementation("org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5")
    implementation("org.bouncycastle:bcpkix-jdk15on:1.68")
    implementation("org.bouncycastle:bcprov-jdk15on:1.69") // intentionally changed from 1.68 -> 1.69 to fix security issues
    implementation("org.jasypt:jasypt:1.9.3")

    // charles core
    if (!chlsMapped.exists()) {
        // we don't have the mapped version set up yet
        project.logger.warn("Mapped Charles Jar not present... things WILL NOT WORK until the `remapJar` task is run.")
    } else {
        implementation(fileTree(dir: "build", include: "charles_MAPPED.jar"))
    }

    // runtime patching library (from the minecraft ecosystem, but should be fine)
    implementation("com.github.McModLauncher:modlauncher:main-8.1.x-SNAPSHOT")

    // modlauncher needs these
    implementation("net.sf.jopt-simple:jopt-simple:5.0.4")
    implementation("org.apache.logging.log4j:log4j-api:2.17.2")
    implementation("org.apache.logging.log4j:log4j-core:2.17.2")
    implementation("org.ow2.asm:asm:9.3")
    implementation("org.ow2.asm:asm-tree:9.3")
    implementation("org.ow2.asm:asm-commons:9.3")
    implementation("org.ow2.asm:asm-util:9.3")
    implementation(fileTree(dir: "libs/modlauncher", include: "grossjava9hacks-1.3.3.jar"))

    // mixin deps
    implementation("com.google.code.gson:gson:2.8.6") // note: charles needs this one too
    implementation("com.google.guava:guava:30.0-jre")

    // the bytecode weaving framework being used
    implementation("org.spongepowered:mixin:0.8.5")

    // finally, our dependencies
    implementation("com.auth0:java-jwt:3.19.2")
    implementation("org.jetbrains:annotations:23.0.0")
}

jar {
    from "LICENSE"
    manifest.attributes(
            "MixinConfigs": "mixin.charles.json",
            "Main-Class": "alaphant.launch.Alaphant",
            "Manifest-Version": 1.0,
            "Specification-Title": "Charles",
            "Specification-Version": "4.8.2",
            "Specification-Vendor": "XK72 Ltd",
            "Implementation-Title": "Alaphant",
            "Implementation-Version": rootProject.version,
            "Implementation-Vendor": "Reece Dunham",
    )
}

def projectLibsDir = file("libs").getAbsolutePath()
def projectTargetDir = file("target").getAbsolutePath()

task run(type: JavaExec) {
    dependsOn jar
    group = "run"
    description = "Run Charles with the plugin."
    classpath(sourceSets.main.runtimeClasspath)
    mainClass = "alaphant.launch.Alaphant"
    jvmArgs "-Dmixin.debug=true"
    jvmArgs "-Djava.net.preferIPv4Stack=false"
    jvmArgs "-Djava.net.preferIPv6Addresses=true"
    jvmArgs "-Djava.library.path=$path;$projectLibsDir;$projectTargetDir"
}

// We do this because it's better then trying to fix classpath issues with configurations.

final String[] shadowJarExclusionPackages = [
        "resources",
        "icons",
        "control",
        "jsbeautifier",
        "com/xk72",
        "com/twitter",
        "com/fasterxml",
        "com/jgoodies",
        "com/thoughtworks",
        "com/sun",
        "com/edankert",
        "org/jclarion",
        "com/miglayout",
        "io",
        "de",
        "org/mozilla",
        "org/xhtmlrenderer",
        "org/xmlpull",
        "org/brotli",
        "net/sf",
        "net/miginfocom",
        "org/bounce",
        "org/bouncycastle",
        "META-INF/versions/15",
        "META-INF/versions/9",
        "com/luciad",
        "jcifs",
        "org/eclipse",
        "org/incava",
        "org/jfree",
        "org/swfx",
        "org/jasypt",
        "com/google/protobuf",
        "google/protobuf",
        "javax",
        "org/json",
        "META-INF/versions/11/org/bouncycastle",
]

final String[] shadowJarExclusionFiles = [
        "charles-session-*.dtd",
        "charles-logging.properties",
        "error.html",
        "errors.properties",
        "sample.webp",
        "splash.png",
        "splash@2x.png",
        "META-INF/charles*",
        "META-INF/mailcap.default",
        "jsyntaxpane-dark.properties",
        "iconmap.properties",
        "XMLPULL_1_1_3_1_VERSION",
        "XPP3_1.1.4c_MIN_VERSION",
        // licenses for excluded packages
        "META-INF/NOTICE.txt",
        "META-INF/LICENSE",
        "LICENSE.txt",
        "META-INF/mime.types",
        "META-INF/mimetypes.default",
        "META-INF/services/java.security.Provider",
]

shadowJar {
    from "LICENSE"
    shadowJarExclusionPackages.each {
        exclude "${it}/**/*"
        exclude "META-INF/services/${it.replace("/", ".")}*"
        exclude "META-INF/maven/${it.replace("/", ".")}*/**/*"
    }
    shadowJarExclusionFiles.each {
        exclude it
    }
}

artifacts {
    archives jar
    archives shadowJar
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}
